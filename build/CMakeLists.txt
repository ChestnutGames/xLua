# Tencent is pleased to support the open source community by making xLua available.
# Copyright (C) 2016 THL A29 Limited, a Tencent company. All rights reserved.
# Licensed under the MIT License (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
# http://opensource.org/licenses/MIT
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.

cmake_minimum_required(VERSION 2.8)

if ( WIN32 AND NOT CYGWIN AND NOT ( CMAKE_SYSTEM_NAME STREQUAL "WindowsStore" ) AND NOT ANDROID)
	set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /MT" CACHE STRING "")
	set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} /MTd" CACHE STRING "")
	set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT" CACHE STRING "")
	set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MTd" CACHE STRING "")
endif ()

project(XLua)

if ( IOS )
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fembed-bitcode")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fembed-bitcode")
endif ()

option ( UINT_ESPECIALLY "using custom ulong" OFF )
option ( USING_LUAJIT "using luajit" OFF )
option ( GC64 "using gc64" OFF )
option ( LUAC_COMPATIBLE_FORMAT "compatible format" OFF )

find_path(XLUA_PROJECT_DIR NAMES SConstruct
    PATHS 
    ${CMAKE_SOURCE_DIR}
    NO_DEFAULT_PATH
    )

MARK_AS_ADVANCED(XLUA_PROJECT_DIR)
set(LUA_SRC_PATH lua-5.3.5/src)
set(LUAJIT_SRC_PATH luajit-2.1.0b3/src)

set ( LUA_RAPIDJSON
    rapidjson/Document.cpp
    rapidjson/rapidjson.cpp
    rapidjson/Schema.cpp
    rapidjson/values.cpp
)
set_property (
    SOURCE ${LUA_RAPIDJSON}
    APPEND
    PROPERTY COMPILE_DEFINITIONS
    LUA_LIB
	XLUA
)
list ( APPEND THIRDPART_INC rapidjson )
list ( APPEND THIRDPART_INC rapidjson/include )
list ( APPEND THIRDPART_SRC ${LUA_RAPIDJSON} )

set ( LUA_SPROTO
    sproto/lsproto.c
    sproto/sproto.c
)
set_property (
    SOURCE ${LUA_SPROTO}
    APPEND
    PROPERTY COMPILE_DEFINITIONS
    LUA_LIB
	XLUA
)
list ( APPEND THIRDPART_INC sproto )
list ( APPEND THIRDPART_SRC ${LUA_SPROTO} )

#begin lpeg
set ( LUA_LPEG
    lpeg/lpcap.c
    lpeg/lpcode.c
    lpeg/lpprint.c
    lpeg/lptree.c
    lpeg/lpvm.c
)
set_property(
    SOURCE ${LUA_LPEG}
    APPEND
    PROPERTY COMPILE_DEFINITIONS
    LUA_LIB
	XLUA
)
list ( APPEND THIRDPART_INC lpeg )
list ( APPEND THIRDPART_SRC ${LUA_LPEG} )
#end lpeg

#begin xluasocket
set ( LUA_XLUASOCKET
    xluasocket/lxluasocket.c
    xluasocket/ringbuf.c
    xluasocket/write_buffer.c
)
set_property(
    SOURCE ${LUA_XLUASOCKET}
    APPEND
    PROPERTY COMPILE_DEFINITIONS
    LUA_LIB
	XLUA
)
list ( APPEND THIRDPART_INC xluasocket )
list ( APPEND THIRDPART_SRC ${LUA_XLUASOCKET} )
#end xluasocket

#begin skynet
set ( LUA_SKYNET
    skynet/lsha1.c
    skynet/lua-crypt.c
)
set_property(
    SOURCE ${LUA_SKYNET}
    APPEND
    PROPERTY COMPILE_DEFINITIONS
    LUA_LIB
	XLUA
)
list ( APPEND THIRDPART_INC skynet )
list ( APPEND THIRDPART_SRC ${LUA_SKYNET} )
#end skynet

set ( LUA_MD5 md5/md5.c)
set ( LUA_RANDOM random/random.c)
set ( LUA_TIMER timer/timer.c)
set ( LUA_CHESTNUT
#    chestnut/foundation/EntitasPP/ComponentTypeId.cpp
#    chestnut/foundation/EntitasPP/Entity.cpp
#    chestnut/foundation/EntitasPP/Group.cpp
#    chestnut/foundation/EntitasPP/GroupObserver.cpp
#    chestnut/foundation/EntitasPP/ISystem.cpp
#    chestnut/foundation/EntitasPP/Matcher.cpp
#    chestnut/foundation/EntitasPP/Pool.cpp
#    chestnut/foundation/EntitasPP/ReactiveSystem.cpp
#    chestnut/foundation/EntitasPP/SystemContainer.cpp
#    chestnut/foundation/src/binaryheap.c
#    chestnut/lualib-src/ball/lua-ball.cpp
#    chestnut/lualib-src/ball/hexmap.cpp
#    chestnut/lualib-src/ball/JoinSystem.cpp
#    chestnut/lualib-src/ball/IndexSystem.cpp
#    chestnut/lualib-src/ball/MapSystem.cpp
#    chestnut/lualib-src/ball/MoveSystem.cpp
#    chestnut/lualib-src/ball/PositionComponent.cpp
    chestnut/lua-array.c
    chestnut/lua-math.c
	chestnut/lua-queue.c
	chestnut/lua-stack.c
    chestnut/lua-timesync.c
    chestnut/lua-vector.c
    chestnut/timeutils.c
)
set ( LUA_RUDP
	rudp/lua-rudp.c
	rudp/rudp.c
	rudp/rudp.h
)
set ( LUA_MTRAND
	mt_rand/lua-mtrand.c
	mt_rand/mt_rand.c
	mt_rand/mt_rand.h
)
set ( LUA_KCP
	kcp/ikcp.c
	kcp/ikcp.h
	kcp/lkcp.c
	kcp/lutil.c
)
set_property(
    SOURCE ${LUA_MD5} ${LUA_RANDOM} ${LUA_TIMER} ${LUA_CHESTNUT} ${LUA_RUDP} ${LUA_MTRAND} ${LUA_KCP}
    APPEND
    PROPERTY COMPILE_DEFINITIONS
    LUA_LIB
)
list ( APPEND THIRDPART_SRC ${LUA_MD5} ${LUA_RANDOM} ${LUA_TIMER} ${LUA_CHESTNUT} ${LUA_RUDP} ${LUA_MTRAND} ${LUA_KCP} )


if (USING_LUAJIT)
	
    if (APPLE AND NOT IOS)
	    include_directories(
		  ${CMAKE_SOURCE_DIR}
		  lua-5.1.5/src
		  lua-5.1.5/etc
		  ${CMAKE_CURRENT_BINARY_DIR}
		  ${THIRDPART_INC}
	    )
	    set ( LUA_CORE lua-5.1.5/src/lapi.c lua-5.1.5/src/lcode.c lua-5.1.5/src/ldebug.c lua-5.1.5/src/ldo.c lua-5.1.5/src/ldump.c lua-5.1.5/src/lfunc.c 
          lua-5.1.5/src/lgc.c lua-5.1.5/src/llex.c lua-5.1.5/src/lmem.c lua-5.1.5/src/lobject.c lua-5.1.5/src/lopcodes.c lua-5.1.5/src/lparser.c lua-5.1.5/src/lstate.c 
          lua-5.1.5/src/lstring.c lua-5.1.5/src/ltable.c lua-5.1.5/src/ltm.c lua-5.1.5/src/lundump.c lua-5.1.5/src/lvm.c lua-5.1.5/src/lzio.c lua-5.1.5/src/lauxlib.c 
          lua-5.1.5/src/lbaselib.c lua-5.1.5/src/ldblib.c lua-5.1.5/src/liolib.c lua-5.1.5/src/lmathlib.c lua-5.1.5/src/loslib.c lua-5.1.5/src/ltablib.c 
          lua-5.1.5/src/lstrlib.c lua-5.1.5/src/linit.c lua-5.1.5/src/loadlib.c)
	else ()
	    include_directories(
		  ${CMAKE_SOURCE_DIR}
		  ${LUAJIT_SRC_PATH}
		  ${CMAKE_CURRENT_BINARY_DIR}
		  ${THIRDPART_INC}
	    )

	    set ( LUA_CORE )
	    set_property( SOURCE xlua.c APPEND PROPERTY COMPILE_DEFINITIONS USING_LUAJIT )
    endif ()
	set ( LUA_LIB )
else ()
	set ( LUA_IDSIZE 120 CACHE NUMBER "gives the maximum size for the description of the source." )

	configure_file ( ${LUA_SRC_PATH}/luaconf.h.in ${CMAKE_CURRENT_BINARY_DIR}/luaconf.h )

	include_directories(
	    ${CMAKE_SOURCE_DIR}
		${LUA_SRC_PATH}
		${CMAKE_CURRENT_BINARY_DIR}
		${THIRDPART_INC}
	)

	set ( LUA_CORE ${LUA_SRC_PATH}/lapi.c ${LUA_SRC_PATH}/lcode.c ${LUA_SRC_PATH}/lctype.c ${LUA_SRC_PATH}/ldebug.c ${LUA_SRC_PATH}/ldo.c ${LUA_SRC_PATH}/ldump.c
	  ${LUA_SRC_PATH}/lfunc.c ${LUA_SRC_PATH}/lgc.c ${LUA_SRC_PATH}/llex.c ${LUA_SRC_PATH}/lmem.c ${LUA_SRC_PATH}/lobject.c ${LUA_SRC_PATH}/lopcodes.c ${LUA_SRC_PATH}/lparser.c
	  ${LUA_SRC_PATH}/lstate.c ${LUA_SRC_PATH}/lstring.c ${LUA_SRC_PATH}/ltable.c ${LUA_SRC_PATH}/ltm.c ${LUA_SRC_PATH}/lundump.c ${LUA_SRC_PATH}/lvm.c ${LUA_SRC_PATH}/lzio.c )
	set ( LUA_LIB ${LUA_SRC_PATH}/lauxlib.c ${LUA_SRC_PATH}/lbaselib.c ${LUA_SRC_PATH}/lbitlib.c ${LUA_SRC_PATH}/lcorolib.c ${LUA_SRC_PATH}/ldblib.c
	  ${LUA_SRC_PATH}/liolib.c ${LUA_SRC_PATH}/lmathlib.c ${LUA_SRC_PATH}/loslib.c ${LUA_SRC_PATH}/lstrlib.c ${LUA_SRC_PATH}/ltablib.c ${LUA_SRC_PATH}/linit.c
	  ${LUA_SRC_PATH}/lutf8lib.c ${LUA_SRC_PATH}/loadlib.c )
endif ()

set ( LUA_SOCKET
    luasocket/auxiliar.c
    luasocket/buffer.c
    luasocket/except.c
    luasocket/inet.c
    luasocket/io.c
    luasocket/luasocket.c
    luasocket/mime.c
    luasocket/options.c
    luasocket/select.c
    luasocket/tcp.c
    luasocket/timeout.c
    luasocket/udp.c 
)

if ( WIN32 AND NOT CYGWIN )
    list (APPEND LUA_SOCKET luasocket/wsocket.c)
else ( )
    list (APPEND LUA_SOCKET luasocket/usocket.c)
endif ( )

set ( XLUA_CORE
    i64lib.c
    perflib.c
    xlua.c
)

if (NOT USING_LUAJIT)
    list (APPEND XLUA_CORE memory_leak_checker.c)
endif ( )

macro(source_group_by_dir proj_dir source_files)
    if(MSVC OR APPLE)
        get_filename_component(sgbd_cur_dir ${proj_dir} ABSOLUTE)
        foreach(sgbd_file ${${source_files}})
			get_filename_component(sgbd_abs_file ${sgbd_file} ABSOLUTE)
            file(RELATIVE_PATH sgbd_fpath ${sgbd_cur_dir} ${sgbd_abs_file})
            string(REGEX REPLACE "\(.*\)/.*" \\1 sgbd_group_name ${sgbd_fpath})
            string(COMPARE EQUAL ${sgbd_fpath} ${sgbd_group_name} sgbd_nogroup)
            string(REPLACE "/" "\\" sgbd_group_name ${sgbd_group_name})
            if(sgbd_nogroup)
                set(sgbd_group_name "\\")
            endif(sgbd_nogroup)
            source_group(${sgbd_group_name} FILES ${sgbd_file})
        endforeach(sgbd_file)
    endif(MSVC OR APPLE)
endmacro(source_group_by_dir)

source_group_by_dir(${CMAKE_CURRENT_SOURCE_DIR} LUA_SOCKET)
source_group_by_dir(${CMAKE_CURRENT_SOURCE_DIR} LUA_CORE)
source_group_by_dir(${CMAKE_CURRENT_SOURCE_DIR} LUA_LIB)
source_group_by_dir(${CMAKE_CURRENT_SOURCE_DIR} XLUA_CORE)
source_group_by_dir(${CMAKE_CURRENT_SOURCE_DIR} LUA_RAPIDJSON)
source_group_by_dir(${CMAKE_CURRENT_SOURCE_DIR} LUA_CHESTNUT)
source_group_by_dir(${CMAKE_CURRENT_SOURCE_DIR} LUA_SPROTO)
source_group_by_dir(${CMAKE_CURRENT_SOURCE_DIR} LUA_LPEG)
source_group_by_dir(${CMAKE_CURRENT_SOURCE_DIR} LUA_SKYNET)
source_group_by_dir(${CMAKE_CURRENT_SOURCE_DIR} LUA_XLUASOCKET)
source_group_by_dir(${CMAKE_CURRENT_SOURCE_DIR} LUA_MD5)
source_group_by_dir(${CMAKE_CURRENT_SOURCE_DIR} LUA_RANDOM)
source_group_by_dir(${CMAKE_CURRENT_SOURCE_DIR} LUA_TIMER)
source_group_by_dir(${CMAKE_CURRENT_SOURCE_DIR} LUA_RUDP)
source_group_by_dir(${CMAKE_CURRENT_SOURCE_DIR} LUA_MTRAND)
source_group_by_dir(${CMAKE_CURRENT_SOURCE_DIR} LUA_KCP)

if (APPLE)
    if (IOS)
        set(CMAKE_OSX_ARCHITECTURES "$(ARCHS_STANDARD)")
        add_library(xlua STATIC
           ${LUA_CORE}
           ${LUA_LIB}
           ${LUA_SOCKET}
           ${XLUA_CORE}
           ${THIRDPART_SRC}
        )
		set_xcode_property (xlua IPHONEOS_DEPLOYMENT_TARGET "7.0")
    else ()
        set(CMAKE_OSX_ARCHITECTURES "$(ARCHS_STANDARD_64_BIT)")
        add_library(xlua MODULE
            ${LUA_CORE}
            ${LUA_LIB}
            ${LUA_SOCKET}
            ${XLUA_CORE}
            ${THIRDPART_SRC}
        )
        set_target_properties ( xlua PROPERTIES BUNDLE TRUE )
        #set_target_properties ( xlua PROPERTIES FRAMEWORK TRUE )
        #set_target_properties ( xlua PROPERTIES MACOSX_RPATH TRUE )
    endif ()
else ( )
    add_library(xlua SHARED
        ${LUA_CORE}
        ${LUA_LIB}
        ${LUA_SOCKET}
        ${XLUA_CORE}
        ${THIRDPART_SRC}
    )
endif ( )

if ( WIN32 AND NOT CYGWIN )
    target_compile_definitions (xlua PRIVATE LUA_BUILD_AS_DLL)
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MD")
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MDd")
endif ( )

if (GC64 AND USING_LUAJIT)
    target_compile_definitions (xlua PRIVATE LUAJIT_ENABLE_GC64)
endif ()

if (LUAC_COMPATIBLE_FORMAT AND NOT USING_LUAJIT)
    target_compile_definitions (xlua PRIVATE LUAC_COMPATIBLE_FORMAT)
endif ()

set_property(
	SOURCE ${LUA_SOCKET}
	APPEND
	PROPERTY COMPILE_DEFINITIONS
	LUA_COMPAT_APIINTCASTS LUA_LIB _CRT_SECURE_NO_WARNINGS _WINSOCK_DEPRECATED_NO_WARNINGS
)

if(UINT_ESPECIALLY)
    ADD_DEFINITIONS(-DUINT_ESPECIALLY)
endif()
	
if ( WIN32 AND NOT CYGWIN )
    if (USING_LUAJIT)
        target_link_libraries(xlua
            ${CMAKE_SOURCE_DIR}/${LUAJIT_SRC_PATH}/lua51.lib
            ws2_32
            ${THIRDPART_LIB} 
        )
    else ()
        target_link_libraries(xlua
            ws2_32
            ${THIRDPART_LIB}
            #${CMAKE_SOURCE_DIR}/chestnut/clib/libplist.lib
        )
    endif()
else ( )
    if (USING_LUAJIT AND NOT APPLE)
		target_link_libraries(xlua
			${CMAKE_SOURCE_DIR}/${LUAJIT_SRC_PATH}/libluajit.a
			m
            ${THIRDPART_LIB} 
		)
    else ()
        target_link_libraries(xlua
            m
            ${THIRDPART_LIB} 
        )
    endif()
endif ( )
